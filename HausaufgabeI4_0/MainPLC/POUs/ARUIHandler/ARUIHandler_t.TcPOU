<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="ARUIHandler_t" Id="{5e29fe96-56d9-4902-98bd-95d3fa4b77c0}" SpecialFunc="None">
    <Declaration><![CDATA[// this class implements variaus UI elements for the ARDevice
FUNCTION_BLOCK ARUIHandler_t
VAR_INPUT
	ARDevice : POINTER TO ARDeviceAPI_t := NULL;	
	systemStatus : POINTER TO systemStatus_t;
	IOExpantionHandler : POINTER TO IOExpantionHandler_t;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	_PLCStatusDisplayErrorBlinker : FB_BA_Blink;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="ControlpannelMessages" Id="{73f6d823-0049-40ae-8073-d519d4158743}">
      <Declaration><![CDATA[METHOD PRIVATE ControlpannelMessages : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// set controlpannel message relese EM-Stop
IF NOT inputOutput.EmStop THEN
	THIS^.ARDevice^.displayEMStop := TRUE;
ELSE
	THIS^.ARDevice^.displayEMStop := FALSE;
END_IF


// set controlpannel message press Quitierung
IF InputOutput.QuittierenLamp = TRUE THEN
	THIS^.ARDevice^.displayQuittierung := TRUE;
ELSE
	THIS^.ARDevice^.displayQuittierung := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ErrorSystemValues" Id="{8f0153d6-0ae2-4437-b60e-f043df1ac4e0}">
      <Declaration><![CDATA[METHOD PRIVATE ErrorSystemValues : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.ARDevice^.errorHide_ERR_PNEU_LOW_PR_402 := NOT ErrorSystemStatusVar.errorHide_ERR_PNEU_LOW_PR_402;
THIS^.ARDevice^.errorHide_ERR_LD_START_LEFT_408_TIMEOUT := NOT ErrorSystemStatusVar.errorHide_ERR_LD_START_LEFT_408_TIMEOUT;
THIS^.ARDevice^.errorHide_ERR_LD_START_RIGHT_408_TIMEOUT := NOT ErrorSystemStatusVar.errorHide_ERR_LD_START_RIGHT_408_TIMEOUT;
THIS^.ARDevice^.errorHide_ERR_LD_MOVE_408_TIMEOUT := NOT ErrorSystemStatusVar.errorHide_ERR_LD_MOVE_408_TIMEOUT;
THIS^.ARDevice^.errorHide_ERR_RT_MOVE_408_TIMEOUT := NOT ErrorSystemStatusVar.errorHide_ERR_RT_MOVE_408_TIMEOUT;
THIS^.ARDevice^.errorHide_ERR_Y2_MOVE_408_TIMEOUT := NOT ErrorSystemStatusVar.errorHide_ERR_Y2_MOVE_408_TIMEOUT;
THIS^.ARDevice^.errorHide_ERR_Y2_START_DOWN_408_TIMEOUT := NOT ErrorSystemStatusVar.errorHide_ERR_Y2_START_DOWN_408_TIMEOUT;
THIS^.ARDevice^.errorHide_ERR_Y2_START_UP_408_TIMEOUT := NOT ErrorSystemStatusVar.errorHide_ERR_Y2_START_UP_408_TIMEOUT;
THIS^.ARDevice^.errorHide_ERR_Y3_MOVE_408_TIMEOUT := NOT ErrorSystemStatusVar.errorHide_ERR_Y3_MOVE_408_TIMEOUT;
THIS^.ARDevice^.errorHide_ERR_Y3_START_DOWN_408_TIMEOUT := NOT ErrorSystemStatusVar.errorHide_ERR_Y3_START_DOWN_408_TIMEOUT;
THIS^.ARDevice^.errorHide_ERR_Y3_START_UP_408_TIMEOUT := NOT ErrorSystemStatusVar.errorHide_ERR_Y3_START_UP_408_TIMEOUT;

ErrorSystemValues := TRUE;
RETURN;]]></ST>
      </Implementation>
    </Method>
    <Method Name="PLCStatusDisplay" Id="{b669cae6-156f-42b2-b4fd-c127ed5ff3a2}">
      <Declaration><![CDATA[// displays in a status witch 
METHOD PRIVATE PLCStatusDisplay : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_PLCStatusDisplayErrorBlinker.bEn := TRUE;
_PLCStatusDisplayErrorBlinker.udiTiOff := 500; // 500 ms
_PLCStatusDisplayErrorBlinker.udiTiOn := 500;  // 500 ms
_PLCStatusDisplayErrorBlinker();


CASE systemStatus^ OF
	systemStatus_t.RUNNING:
		THIS^.ARDevice^.lmpRunning := TRUE;
		THIS^.ARDevice^.lmpStopped := FALSE;
		THIS^.ARDevice^.lmpError := FALSE;
		
	systemStatus_t.STOPPED:
		THIS^.ARDevice^.lmpRunning := FALSE;
		THIS^.ARDevice^.lmpStopped := TRUE;
		THIS^.ARDevice^.lmpError := FALSE;

	systemStatus_t.ERROR:	
		THIS^.ARDevice^.lmpRunning := FALSE;
		THIS^.ARDevice^.lmpStopped := FALSE;
		THIS^.ARDevice^.lmpError := _PLCStatusDisplayErrorBlinker.bQ;

END_CASE

 ]]></ST>
      </Implementation>
    </Method>
    <Method Name="sensorValues" Id="{d28989d5-ce3b-4599-aaba-754e46662b1a}">
      <Declaration><![CDATA[METHOD PRIVATE sensorValues : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.ARDevice^.PneumaticOkB20_sensorStatus := IOExpantionHandler^.getSensorStatus(sensorID := sensorID_t.SENSOR_PNEUMATIC_PRESHURE_OK);
THIS^.ARDevice^.PartTurntablePresentB12_sensorStatus := IOExpantionHandler^.getSensorStatus(sensorID := sensorID_t.EXPANTION_SENSOR_B12_PART_TURNTABLE_PRESENT);
THIS^.ARDevice^.LinearActuatorLeftB16_sensorStatus := IOExpantionHandler^.getSensorStatus(sensorID := sensorID_t.SENSOR_B16_GRIPPER_LEFT);
THIS^.ARDevice^.LinearActuatorRightB17_sensorStatus := IOExpantionHandler^.getSensorStatus(sensorID := sensorID_t.SENSOR_B17_GRIPPER_RIGHT);
THIS^.ARDevice^.TurntablePositionReachedB13_sensorStatus := IOExpantionHandler^.getSensorStatus(sensorID := sensorID_t.SENSOR_B13_TURNTABLE_POS_REACHED);
THIS^.ARDevice^.StorageEntranceB5_sensorStatus := IOExpantionHandler^.getSensorStatus(sensorID := sensorID_t.SENSOR_B5_STORAGE_ENTRANCE);
THIS^.ARDevice^.ConveyorBeltMetalPresentB8_sensorStatus := IOExpantionHandler^.getSensorStatus(sensorID := sensorID_t.SENSOR_B8_CONVAYORBELT_METTAL_PRESENT);
THIS^.ARDevice^.EntranceConveyorBeltB7_sensorStatus := IOExpantionHandler^.getSensorStatus(sensorID := sensorID_t.EXPANTION_SENSOR_B7_ENTRANCE_CONVAYORBELT);
THIS^.ARDevice^.SensorPartMetalPresentB6_sensorStatus := IOExpantionHandler^.getSensorStatus(sensorID := sensorID_t.EXPANTION_SENSOR_B6_PART_SENSOR_METTAL_PRESENT);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="update" Id="{34e7badc-3f2c-43ff-8eb1-c1fa5dc964c2}">
      <Declaration><![CDATA[// update function, call this every cycle
METHOD update : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF THIS^.ARDevice = NULL THEN
	update := FALSE;
	RETURN;
END_IF

THIS^.PLCStatusDisplay();
THIS^.ControlpannelMessages();
THIS^.sensorValues();
THIS^.ErrorSystemValues();

update := TRUE;
RETURN;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>