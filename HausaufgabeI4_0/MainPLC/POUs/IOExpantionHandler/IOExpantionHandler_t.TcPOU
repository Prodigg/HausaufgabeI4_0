<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="IOExpantionHandler_t" Id="{a0bf6b42-7e02-4eb9-b45b-673d96ed76da}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK IOExpantionHandler_t
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
 
	_IOExpantionExpantionInByte_0 AT %I* : BYTE; // in byte 0
	_IOExpantionExpantionInByte_1 AT %I* : BYTE; // in byte 1
	_IOExpantionExpantionInByte_2 AT %I* : BYTE; // diagnostic byte 2
	_IOExpantionExpantionInByte_3 AT %I* : BYTE; // user specifyed content 3
	
	_IOExpantionExpantionInBytes : ARRAY [0..3] OF POINTER TO BYTE := [ADR(_IOExpantionExpantionInByte_0), ADR(_IOExpantionExpantionInByte_1), ADR(_IOExpantionExpantionInByte_2), ADR(_IOExpantionExpantionInByte_3)];
	 
	_FestoPneumaticOutByte_0 AT %Q* : BYTE;
	_FestoPneumaticOutByte_1 AT %Q* : BYTE;
	_FestoPneumaticOutByte_2 AT %Q* : BYTE;
	_FestoPneumaticOutByte_3 AT %Q* : BYTE;
	
	_FestoPneumaticOutBytes : ARRAY [0..3] OF POINTER TO BYTE := [ADR(_FestoPneumaticOutByte_0), ADR(_FestoPneumaticOutByte_1), ADR(_FestoPneumaticOutByte_2), ADR(_FestoPneumaticOutByte_3)];
	
	_IOExpantionIn_0 AT %I* : UINT; // this input does only have two active bits (bit 0 and bit 1)
	
	_IOExpantionInBytes : ARRAY [0..0] OF POINTER TO UINT := [ADR(_IOExpantionIn_0)];
	
	_ErrorMessage : FB_TcMessage;
	
	//------------------------------------
	
	_lastMessageRead : UINT := 0; // last message retrived by this^.getNewMessage();
	_newestMessageInBuffer : UINT := 0; // newest message in ring buffer (actual newest message)
	_currentMessageRead : BYTE := 16#00; // current message being read
	
	_subscriberArray : ARRAY[0..99] OF IOExpantionMessageSubData_t;
	
	_readDiagIndex : FB_EcCoESdoRead;
	_readDiagMessage : FB_EcCoESdoRead;
	
	_readDiagMessageClock : pulseSignalGenerator_t;
	
	_returnDiagBuffer : ARRAY[0..236] OF BYTE;
	_returnIndexBuff : ARRAY[0..39] OF BYTE;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// this is for handeling the IO link master from murr. This is a highly specialised class that needs to be changed acording to the inputs on the expantion of IO link master from murr.

]]></ST>
    </Implementation>
    <Folder Name="Actors" Id="{331d78da-e993-4575-858d-04a25f792716}" />
    <Folder Name="Communication" Id="{38781554-1101-4517-b007-0e83b447f3ff}">
      <Folder Name="CommunicationAPI" Id="{5d50d83b-6562-4106-b93c-1e39eae1b63a}" />
    </Folder>
    <Folder Name="Sensors" Id="{d947e11d-c087-42e2-8931-1b1a26035641}" />
    <Method Name="callCallback" Id="{13302913-24d0-46c0-8c77-01cad1537519}" FolderPath="Communication\">
      <Declaration><![CDATA[METHOD PRIVATE callCallback : BOOL
VAR_INPUT
	messageDescription : IOExpantionMessageDescriptor_t;
END_VAR
VAR
	i : UINt := 0;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// search for callback to call

FOR i := 0 TO TO_UINT(SIZEOF(_subscriberArray) / SIZEOF(IOExpantionMessageSubData_t)) DO
	IF isMesDesEqual(_subscriberArray[i].messageDescription, messageDescription) THEN
		IF _subscriberArray[i].callbackVariable <> NULL THEN
			_subscriberArray[i].callbackVariable^ := TRUE;
		END_IF
	END_IF
END_FOR

callCallback := TRUE;
return;]]></ST>
      </Implementation>
    </Method>
    <Method Name="comUpdate" Id="{9809009e-414c-4d4e-b8b8-ed429013ec99}" FolderPath="Communication\">
      <Declaration><![CDATA[// communication Update, call this every cycle
METHOD comUpdate : BOOL
VAR_INPUT
END_VAR
VAR 
	getNewestMessageIndexBusy : BOOL := FALSE;
	NewestMessageAvalableTmpOut : BYTE := 16#00;
	
	getMessageBusy : BOOL := FALSE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// check if a new message is avalable
IF _newestMessageInBuffer = _lastMessageRead THEN
	NewestMessageAvalableTmpOut := getNewestMessageIndex(busy => getNewestMessageIndexBusy);
	IF getNewestMessageIndexBusy THEN
	RETURN;
	ELSE 
	_newestMessageInBuffer := NewestMessageAvalableTmpOut;
	RETURN;
	END_IF
END_IF

// read messages 
IF _readDiagMessageClock.signal THEN
	getMessage(index := _currentMessageRead, busy => getMessageBusy);
END_IF

IF getMessageBusy = FALSE AND _readDiagMessageClock.signal THEN
	_currentMessageRead := getNextMessageIndex(_currentMessageRead);
	
	IF _currentMessageRead = _newestMessageInBuffer + 1 THEN
		_lastMessageRead := _newestMessageInBuffer;
	END_IF
	
	callCallback(genMessageDescription(ADR(_returnDiagBuffer)));
END_IF

_readDiagMessageClock.update();]]></ST>
      </Implementation>
    </Method>
    <Method Name="convertByteBit" Id="{c72d17b1-1c44-49e3-a151-07e0993e3ad1}" FolderPath="Sensors\">
      <Declaration><![CDATA[METHOD PRIVATE convertByteBit : BOOL
VAR_INPUT
	byteVal : BYTE;
	offset : UINT;
END_VAR

VAR
	_tmpStr: STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF offset > 7 THEN 
	convertByteBit := FALSE; 
	_ErrorMessage.CreateEx(TC_EVENTS.ProgrammingErrors.invalidAccsessOfBitInByte, 0 );
	_ErrorMessage.ipArguments.AddString(__POUNAME());
	_tmpStr := formatPosition(__POSITION());
	_ErrorMessage.ipArguments.AddString(_tmpStr);
	_ErrorMessage.Send(0);
	RETURN;
END_IF

convertByteBit := TO_BOOL(( byteVal AND (SHL(1, offset ))));

RETURN;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="extractSensorBit" Id="{1ab0209d-d9ba-432f-bbe3-5c9a3d418c30}" FolderPath="Sensors\">
      <Declaration><![CDATA[METHOD PRIVATE extractSensorBit : BOOL
VAR_INPUT
	sensorByte : UINT; // byte where the sensor is in 
	sensorBit : UINT;  // bit from the sensor
	sensorLocation : IOExpantionLocation_t; // location of the sensor
END_VAR

VAR
	_tmpStr: STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE sensorLocation OF
	IOExpantionLocation_t.ROOT:
		IF sensorByte > 0 THEN
			extractSensorBit := FALSE; 
			_ErrorMessage.CreateEx(TC_EVENTS.ProgrammingErrors.invalidAccsessOfByte, 0 );
			_ErrorMessage.ipArguments.AddString(__POUNAME());
			_tmpStr := formatPosition(__POSITION());
			_ErrorMessage.ipArguments.AddString(_tmpStr);
			_ErrorMessage.Send(0);
			RETURN;
		END_IF

		(*
		The function convertByteBit(...) only accepts an BYTE not a UINT. A BYTE has 8 bits and a UINT has 16. We need to convert the UINT to a BYTE, 
		this is non trivial, beacuse if the sensorBit > 7 then we must accsess the other 8 bits.   
		
		 1111  1111   1111  1111 
 		|		   | |			|
		------------ ------------
		   8 - 15    	0 - 7
		   
		For that we must shift the value 8 bits to the right if sensorBit > 7. 
		For this we use this thing of a math expression: FLOOR(sensorBit / 8) * 8
		
		To ajust the offset for the function we use this math expression: sensorBit - FLOOR(sensorBit / 8) * 8 
		The rest is convertion of data types.
		
 		*)
		extractSensorBit := convertByteBit(	byteVal := TO_BYTE(SHR(_IOExpantionInBytes[sensorByte]^, TO_UINT(FLOOR(sensorBit / 8) * 8))), 
											offset := TO_UINT(sensorBit - FLOOR(sensorBit / 8) * 8 ));
		
	IOExpantionLocation_t.EXPANTION:
		IF sensorByte > 1 THEN 
			extractSensorBit := FALSE; 
			_ErrorMessage.CreateEx(TC_EVENTS.ProgrammingErrors.invalidAccsessOfByte, 0 );
			_ErrorMessage.ipArguments.AddString(__POUNAME());
			_tmpStr := formatPosition(__POSITION());
			_ErrorMessage.ipArguments.AddString(_tmpStr);
			_ErrorMessage.Send(0);
			RETURN;
		END_IF
	
		extractSensorBit := convertByteBit(byteVal := _IOExpantionExpantionInBytes[sensorByte]^, offset := sensorBit);
END_CASE

RETURN;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_Init" Id="{aec21175-083a-4765-bd49-891f0dda08d7}">
      <Declaration><![CDATA[//FB_Init ist immer implizit verfügbar und wird primär für die Initialisierung verwendet.
//Der Rückgabewert wird nicht ausgewertet. Für gezielte Einflussnahme können Sie
//die Methoden explizit deklarieren und darin mit dem Standard-Initialisierungscode 
//zusätzlichen Code bereitstellen. Sie können den Rückgabewert auswerten.
METHOD FB_Init: BOOL
VAR_INPUT    
bInitRetains: BOOL; // TRUE: Die Retain-Variablen werden initialisiert (Reset warm / Reset kalt)    
bInCopyCode: BOOL;  // TRUE: Die Instanz wird danach in den Kopiercode kopiert (Online-Change)
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_readDiagMessageClock.durrationBetweenSignals_ms := 50;]]></ST>
      </Implementation>
    </Method>
    <Method Name="genMessageDescription" Id="{f9e3f21e-0cb1-4f67-b4b3-cab6399e6b44}" FolderPath="Communication\">
      <Declaration><![CDATA[METHOD PRIVATE genMessageDescription : IOExpantionMessageDescriptor_t;
VAR_INPUT
	_data : POINTER TO ARRAY[0..236] OF BYTE; 
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// extract diagCode
memcpy(destAddr := ADR(genMessageDescription.diagCode), srcAddr := _data, n := SIZEOF(genMessageDescription.diagCode));

// extract textID
MEMCPY(destAddr := ADR(genMessageDescription.textID), srcAddr := ADR(_data^[6]), n := SIZEOF(genMessageDescription.textID));
]]></ST>
      </Implementation>
    </Method>
    <Method Name="getActor" Id="{999a75fa-1afb-44bc-b8d5-041e1e5d61ee}" FolderPath="Actors\">
      <Declaration><![CDATA[METHOD getActor : BOOL
VAR_INPUT
	actorID : actorID_t;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE actorID OF
	actorID_t.ACTOR_0:
		getActor := convertByteBit(_FestoPneumaticOutBytes[0]^, 0);
		
	actorID_t.ACTOR_1:
		getActor := convertByteBit(_FestoPneumaticOutBytes[0]^, 2);
		
	actorID_t.ACTOR_2:
		getActor := convertByteBit(_FestoPneumaticOutBytes[0]^, 4);
		
	actorID_t.ACTOR_3:
		getActor := convertByteBit(_FestoPneumaticOutBytes[0]^, 6);
		
	actorID_t.ACTOR_GRIPPER_RIGHT_LEFT:
		getActor := convertByteBit(_FestoPneumaticOutBytes[1]^, 0);	
		
	actorID_t.ACTOR_GRIPPER_OPEN_CLOSE:
		getActor := convertByteBit(_FestoPneumaticOutBytes[1]^, 2);
		
	actorID_t.ACTOR_GRIPPER_UP_DOWN:
		getActor := convertByteBit(_FestoPneumaticOutBytes[1]^, 4);
		
	actorID_t.ACTOR_Y1_OUT:
		getActor := convertByteBit(_FestoPneumaticOutBytes[1]^, 6);
		
	actorID_t.ACTOR_Y2_OUT:
		getActor := convertByteBit(_FestoPneumaticOutBytes[2]^, 0);
		
	actorID_t.ACTOR_Y3_OUT:
		getActor := convertByteBit(_FestoPneumaticOutBytes[2]^, 2);
	
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="getMessage" Id="{e354e0ff-27cb-4c0f-87c4-ea76bf824ee7}" FolderPath="Communication\CommunicationAPI\">
      <Declaration><![CDATA[METHOD PRIVATE getMessage : BOOL
VAR_INPUT
	index : BYTE;
END_VAR
VAR_OUTPUT
	readLength : UDINT;
	busy : BOOL;
END_VAR
VAR 
	calculatedIndex : BYTE := 0;
	_error : BOOL := FALSE;
	_errorID : UDINT := 0;
END_VAR 
]]></Declaration>
      <Implementation>
        <ST><![CDATA[calculatedIndex := index + 6; // 6 is offset
_readDiagMessage(
	sNetId:= '5.85.199.196.4.1', 
	nSlaveAddr:=1001 , 
	nSubIndex:= calculatedIndex, 
	nIndex:= 16#10F3, 
	pDstBuf:= ADR(_returnDiagBuffer), 
	cbBufLen:= 237, 
	bExecute:=TRUE , 
	tTimeout:= T#5S, 
	bBusy=> busy, 
	bError=> _error, 
	nErrId=> _errorID, 
	cbRead=>ReadLength);
	
IF busy = FALSE THEN
	// to cycle object
	_readDiagMessage(
		sNetId:= '5.85.199.196.4.1', 
		nSlaveAddr:=1001 , 
		nSubIndex:= calculatedIndex, 
		nIndex:= 16#10F3, 
		pDstBuf:= ADR(_returnDiagBuffer), 
		cbBufLen:= 237, 
		bExecute:=FALSE , 
		tTimeout:= T#5S, 
		bBusy=> , 
		bError=> , 
		nErrId=> , 
		cbRead=>ReadLength);
END_IF
	
	getMessage := TRUE;
	RETURN;]]></ST>
      </Implementation>
    </Method>
    <Method Name="getNewestMessageIndex" Id="{fe6de5f1-f701-4952-bed1-93bc1395412d}" FolderPath="Communication\CommunicationAPI\">
      <Declaration><![CDATA[METHOD PRIVATE getNewestMessageIndex : BYTE
VAR_INPUT
END_VAR
VAR_OUTPUT 
	busy : BOOL := FALSE;
	ReadLength : UDINT := 0;
END_VAR
VAR 
	_error : BOOL := FALSE;
	_errorID : UDINT := 0;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_readDiagIndex(
	sNetId:= '5.85.199.196.4.1', 
	nSlaveAddr:=1001 , 
	nSubIndex:= 2, 
	nIndex:= 16#10F3, 
	pDstBuf:= ADR(_returnIndexBuff), 
	cbBufLen:= 40, 
	bExecute:=TRUE , 
	tTimeout:= T#5S, 
	bBusy=> busy, 
	bError=> _error, 
	nErrId=> _errorID, 
	cbRead=>ReadLength);
	
	IF busy = FALSE THEN
		
		getNewestMessageIndex := _returnIndexBuff[0];
		// to cycle object
		_readDiagIndex(
			sNetId:= '5.85.199.196.4.1', 
			nSlaveAddr:=1001 , 
			nSubIndex:= 2, 
			nIndex:= 16#10F3, 
			pDstBuf:= ADR(_returnIndexBuff), 
			cbBufLen:= 40, 
			bExecute:=FALSE , 
			tTimeout:= T#5S, 
			bBusy=> , 
			bError=> , 
			nErrId=> , 
			cbRead=>ReadLength);
	ELSE 
		getNewestMessageIndex := 16#00;
	END_IF
	RETURN;]]></ST>
      </Implementation>
    </Method>
    <Method Name="getNextMessageIndex" Id="{0c220e0e-59cf-4703-b7b5-4d358c2c0076}" FolderPath="Communication\">
      <Declaration><![CDATA[METHOD PRIVATE getNextMessageIndex : BYTE;
VAR_INPUT
	currentIndex : BYTE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
getNextMessageIndex := currentIndex + 1;

IF getNextMessageIndex = 16#00 THEN
	getNextMessageIndex := TO_BYTE(16#06);
END_IF

return;]]></ST>
      </Implementation>
    </Method>
    <Method Name="getSensorStatus" Id="{7b443d43-03f0-4b5f-92b8-6e4d10aad58a}" FolderPath="Sensors\">
      <Declaration><![CDATA[METHOD getSensorStatus : BOOL
VAR_INPUT
	sensorID : sensorID_t;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE sensorID OF
	sensorID_t.SENSOR_B8_CONVAYORBELT_METTAL_PRESENT:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.EXPANTION, sensorByte := 0, sensorBit := 0); 
	sensorID_t.SENSOR_B5_STORAGE_ENTRANCE:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.EXPANTION, sensorByte := 0, sensorBit := 1); 
		
	sensorID_t.SENSOR_B17_GRIPPER_RIGHT:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.EXPANTION, sensorByte := 0, sensorBit := 2); 
	sensorID_t.SENSOR_B16_GRIPPER_LEFT:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.EXPANTION, sensorByte := 0, sensorBit := 3); 
		
	sensorID_t.SENSOR_B3_Y3_DOWN:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.EXPANTION, sensorByte := 0, sensorBit := 4); 
	sensorID_t.SENSOR_B4_Y3_UP:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.EXPANTION, sensorByte := 0, sensorBit := 5); 
		
	sensorID_t.EXPANTION_SENSOR_Y4_UP:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.EXPANTION, sensorByte := 0, sensorBit := 6); 
	sensorID_t.EXPANTION_SENSOR_B11_Y5_INSIDE:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.EXPANTION, sensorByte := 0, sensorBit := 7); 
		
	sensorID_t.EXPANTION_SENSOR_B7_ENTRANCE_CONVAYORBELT:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.EXPANTION, sensorByte := 1, sensorBit := 0); 
	sensorID_t.EXPANTION_SENSOR_B6_PART_SENSOR_METTAL_PRESENT:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.EXPANTION, sensorByte := 1, sensorBit := 1); 
		
	sensorID_t.EXPANTION_SENSOR_B12_PART_TURNTABLE_PRESENT:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.EXPANTION, sensorByte := 1, sensorBit := 2); 
	sensorID_t.EXPANTION_SENSOR_Y4_DOWN:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.EXPANTION, sensorByte := 1, sensorBit := 3); 
		
	sensorID_t.EXPANTION_SENSOR_B10_Y5_OUT:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.EXPANTION, sensorByte := 1, sensorBit := 4); 
	sensorID_t.EXPANTION_SENSOR_B18_SENSOR_Y4:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.EXPANTION, sensorByte := 1, sensorBit := 5); 	
		
	sensorID_t.EXPANTION_SENSOR_B1_Y2_DOWN:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.EXPANTION, sensorByte := 1, sensorBit := 6); 
	sensorID_t.EXPANTION_SENSOR_B2_Y2_UP:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.EXPANTION, sensorByte := 1, sensorBit := 7); 
		
	sensorID_t.SENSOR_PNEUMATIC_PRESHURE_OK:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.ROOT, sensorByte := 0, sensorBit := 12); 
	sensorID_t.SENSOR_B13_TURNTABLE_POS_REACHED:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.ROOT, sensorByte := 0, sensorBit := 13); 
END_CASE

RETURN;]]></ST>
      </Implementation>
    </Method>
    <Method Name="isMesDesEqual" Id="{3735bd1a-402f-4362-ab25-82c1d64725c9}" FolderPath="Communication\">
      <Declaration><![CDATA[METHOD PRIVATE isMesDesEqual : BOOL
VAR_INPUT
	messageDescription1 : IOExpantionMessageDescriptor_t;
	messageDescription2 : IOExpantionMessageDescriptor_t;
END_VAR
VAR
	i : UINT := 0;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[isMesDesEqual := TRUE;
FOR i := 0 TO 3 DO
	isMesDesEqual := isMesDesEqual AND messageDescription1.diagCode[i] = messageDescription2.diagCode[i];
END_FOR

FOR i := 0 TO 1 DO
	isMesDesEqual := isMesDesEqual AND messageDescription1.textID[i] = messageDescription2.textID[i];
END_FOR

RETURN;]]></ST>
      </Implementation>
    </Method>
    <Method Name="isNewMessageAvalable" Id="{2d8daaac-2c77-494f-9b28-d3cbcd0244b3}" FolderPath="Communication\CommunicationAPI\">
      <Declaration><![CDATA[METHOD PRIVATE isNewMessageAvalable : BOOL
VAR_INPUT
END_VAR
VAR_OUTPUT 
	busy : BOOL := FALSE;
	ReadLength : UDINT := 0;
END_VAR
VAR 
	_destBuff : BOOL := 0;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_readDiagMessage(
	sNetId:= '5.85.199.196.4.1', 
	nSlaveAddr:=1001 , 
	nSubIndex:= 16#04, 
	nIndex:= 16#10F3, 
	pDstBuf:= ADR(_destBuff), 
	cbBufLen:= 237, 
	bExecute:=TRUE , 
	tTimeout:= T#5S, 
	bBusy=> busy, 
	bError=> , 
	nErrId=> , 
	cbRead=>ReadLength);
	
	IF busy = FALSE THEN
		isNewMessageAvalable := _destBuff;
		// to cycle object
		_readDiagMessage(
			sNetId:= '5.85.199.196.4.1', 
			nSlaveAddr:=1001 , 
			nSubIndex:= 16#04, 
			nIndex:= 16#10F3, 
			pDstBuf:= ADR(_destBuff), 
			cbBufLen:= 237, 
			bExecute:=FALSE , 
			tTimeout:= T#5S, 
			bBusy=> busy, 
			bError=> , 
			nErrId=> , 
			cbRead=>);
	ELSE 
		isNewMessageAvalable := FALSE;
	END_IF
	RETURN;]]></ST>
      </Implementation>
    </Method>
    <Method Name="setActor" Id="{ee0a521a-6c67-4dc3-88dd-d9da5401c02a}" FolderPath="Actors\">
      <Declaration><![CDATA[METHOD setActor : BOOL
VAR_INPUT
	actorID : actorID_t;
	value : BOOL;

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE actorID OF
	actorID_t.ACTOR_0:
		setActorBit(_FestoPneumaticOutBytes[0], 0, value);
		
	actorID_t.ACTOR_1:
		setActorBit(_FestoPneumaticOutBytes[0], 2, value);
		
	actorID_t.ACTOR_2:
		setActorBit(_FestoPneumaticOutBytes[0], 4, value);
		
	actorID_t.ACTOR_3:
		setActorBit(_FestoPneumaticOutBytes[0], 6, value);
		
	actorID_t.ACTOR_GRIPPER_RIGHT_LEFT:
		setActorBit(_FestoPneumaticOutBytes[1], 0, value);	
		
	actorID_t.ACTOR_GRIPPER_OPEN_CLOSE:
		setActorBit(_FestoPneumaticOutBytes[1], 2, value);
		
	actorID_t.ACTOR_GRIPPER_UP_DOWN:
		setActorBit(_FestoPneumaticOutBytes[1], 4, value);
		
	actorID_t.ACTOR_Y1_OUT:
		setActorBit(_FestoPneumaticOutBytes[1], 6, value);
		
	actorID_t.ACTOR_Y2_OUT:
		setActorBit(_FestoPneumaticOutBytes[2], 0, value);
		
	actorID_t.ACTOR_Y3_OUT:
		setActorBit(_FestoPneumaticOutBytes[2], 2, value);
	
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="setActorBit" Id="{d49d41fc-d7bc-481a-89da-655d607b50bb}" FolderPath="Actors\">
      <Declaration><![CDATA[METHOD PRIVATE setActorBit : BOOL
VAR_INPUT
	byteVal : POINTER TO BYTE;
	offset : UINT;
	value : BOOL;
END_VAR
VAR
	tmpByte : BYTE; 
	_tmpStr: STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF offset > 7 THEN 
	setActorBit := FALSE; 
	_ErrorMessage.CreateEx(TC_EVENTS.ProgrammingErrors.invalidAccsessOfByte, 0 );
	_ErrorMessage.ipArguments.AddString(__POUNAME());
	_tmpStr := formatPosition(__POSITION());
	_ErrorMessage.ipArguments.AddString(_tmpStr);
	_ErrorMessage.Send(0);
	RETURN;
END_IF

tmpByte := (NOT SHL(1, offset)) AND byteVal^;

byteVal^ := TO_BYTE(SHL(TO_INT(value), offset)) OR tmpByte;]]></ST>
      </Implementation>
    </Method>
    <Method Name="subscribe" Id="{93c4abdd-1781-40c0-8c48-321db8abd157}" FolderPath="Communication\">
      <Declaration><![CDATA[// subsctibes to a Message
METHOD subscribe : BOOL
VAR_INPUT
	callbackVariable : POINTER TO BOOL;
	diagCode : ARRAY [0..3] OF BYTE;
	textID : ARRAY [0..1] OF BYTE;
END_VAR
VAR 
	i : UINT := 0;
	spaceFound : BOOL := FALSE;
	_tmpStr: STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF callbackVariable = NULL THEN
	subscribe := FALSE;	
	RETURN; // nothing to call back to
END_IF

// search for avalable spot in list, may be expencive (worst case O(n))
FOR i := 0 TO 99 DO
	IF _subscriberArray[i].callbackVariable = NULL THEN
		spaceFound := TRUE;
		EXIT;
	END_IF
END_FOR

IF spaceFound = FALSE THEN
	subscribe := FALSE;
	_ErrorMessage.CreateEx(TC_EVENTS.ProgrammingErrors.subscriberArrayFull, 0 );
	_ErrorMessage.ipArguments.AddString(__POUNAME());
	_tmpStr := formatPosition(__POSITION());
	_ErrorMessage.ipArguments.AddString(_tmpStr);
	_ErrorMessage.ipArguments.AddUInt(SIZEOF(_subscriberArray) / SIZEOF(IOExpantionMessageSubData_t));
	_ErrorMessage.Send(0);
	RETURN;
END_IF


// insert value
_subscriberArray[i].callbackVariable := callbackVariable;
_subscriberArray[i].messageDescription.diagCode := diagCode;
_subscriberArray[i].messageDescription.textID := textID;

subscribe := TRUE;
RETURN;]]></ST>
      </Implementation>
    </Method>
    <Method Name="unsubscribe" Id="{98c8be6b-4fb4-4acc-905f-d72573ccf7bc}" FolderPath="Communication\">
      <Declaration><![CDATA[// unsubscribe from a message
METHOD unsubscribe : BOOL
VAR_INPUT
	callbackVariable : POINTER TO BOOL;
END_VAR
VAR 
	spaceFound : BOOL := FALSE;
	i : UINT := 0;
	_tmpStr : STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF callbackVariable = NULL THEN
	unsubscribe := FALSE;	
	RETURN; // nothing to call back to
END_IF

// search for avalable spot in list, may be expencive (worst case O(n))
FOR i := 0 TO 99 DO
	IF _subscriberArray[i].callbackVariable = callbackVariable THEN
		spaceFound := TRUE;
		EXIT;
	END_IF
END_FOR

IF spaceFound = FALSE THEN
	unsubscribe := FALSE;
	_ErrorMessage.CreateEx(TC_EVENTS.ProgrammingErrors.subscriberArrayFull, 0 );
	_ErrorMessage.ipArguments.AddString(__POUNAME());
	_tmpStr := formatPosition(__POSITION());
	_ErrorMessage.ipArguments.AddString(_tmpStr);
	_ErrorMessage.ipArguments.AddUInt(SIZEOF(_subscriberArray) / SIZEOF(IOExpantionMessageSubData_t));
	_ErrorMessage.Send(0);
	RETURN;
END_IF


// reset pointer 
_subscriberArray[i].callbackVariable := NULL;

unsubscribe := TRUE;
RETURN;
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>