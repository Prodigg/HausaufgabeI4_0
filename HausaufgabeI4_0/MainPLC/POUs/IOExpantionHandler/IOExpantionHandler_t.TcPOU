<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="IOExpantionHandler_t" Id="{a0bf6b42-7e02-4eb9-b45b-673d96ed76da}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK IOExpantionHandler_t
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
 
	_IOExpantionExpantionInByte_0 AT %I* : BYTE; // in byte 0
	_IOExpantionExpantionInByte_1 AT %I* : BYTE; // in byte 1
	_IOExpantionExpantionInByte_2 AT %I* : BYTE; // diagnostic byte 2
	_IOExpantionExpantionInByte_3 AT %I* : BYTE; // user specifyed content 3
	
	_IOExpantionExpantionInBytes : ARRAY [0..3] OF POINTER TO BYTE := [ADR(_IOExpantionExpantionInByte_0), ADR(_IOExpantionExpantionInByte_1), ADR(_IOExpantionExpantionInByte_2), ADR(_IOExpantionExpantionInByte_3)];
	 
	_FestoPneumaticOutByte_0 AT %Q* : BYTE;
	_FestoPneumaticOutByte_1 AT %Q* : BYTE;
	_FestoPneumaticOutByte_2 AT %Q* : BYTE;
	_FestoPneumaticOutByte_3 AT %Q* : BYTE;
	
	_FestoPneumaticOutBytes : ARRAY [0..3] OF POINTER TO BYTE := [ADR(_FestoPneumaticOutByte_0), ADR(_FestoPneumaticOutByte_1), ADR(_FestoPneumaticOutByte_2), ADR(_FestoPneumaticOutByte_3)];
	
	_IOExpantionIn_0 AT %I* : UINT; // this input does only have two active bits (bit 0 and bit 1)
	
	_IOExpantionInBytes : ARRAY [0..0] OF POINTER TO UINT := [ADR(_IOExpantionIn_0)];
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// this is for handeling the IO link master from murr. This is a highly specialised class that needs to be changed acording to the inputs on the expantion of IO link master from murr.

]]></ST>
    </Implementation>
    <Folder Name="Actors" Id="{331d78da-e993-4575-858d-04a25f792716}" />
    <Folder Name="Sensors" Id="{d947e11d-c087-42e2-8931-1b1a26035641}" />
    <Method Name="convertByteBit" Id="{c72d17b1-1c44-49e3-a151-07e0993e3ad1}" FolderPath="Sensors\">
      <Declaration><![CDATA[METHOD PRIVATE convertByteBit : BOOL
VAR_INPUT
	byteVal : BYTE;
	offset : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF offset > 7 THEN 
	convertByteBit := FALSE; {info 'TODO: integrate in error handeling syastem (sevarity: critical error) "invalid accsess of bit in byte (out of range)" '}
	RETURN;
END_IF

convertByteBit := TO_BOOL(( byteVal AND (SHL(1, offset ))));

RETURN;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="extractSensorBit" Id="{1ab0209d-d9ba-432f-bbe3-5c9a3d418c30}" FolderPath="Sensors\">
      <Declaration><![CDATA[METHOD PRIVATE extractSensorBit : BOOL
VAR_INPUT
	sensorByte : UINT; // byte where the sensor is in 
	sensorBit : UINT;  // bit from the sensor
	sensorLocation : IOExpantionLocation_t; // location of the sensor
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE sensorLocation OF
	IOExpantionLocation_t.ROOT:
		IF sensorByte > 0 THEN
			extractSensorBit := FALSE; {info 'TODO: integrate in error handeling syastem (sevarity: critical error) "invalid accsess of byte (out of range)" '}
			RETURN;
		END_IF

		(*
		The function convertByteBit(...) only accepts an BYTE not a UINT. A BYTE has 8 bits and a UINT has 16. We need to convert the UINT to a BYTE, 
		this is non trivial, beacuse if the sensorBit > 7 then we must accsess the other 8 bits.   
		
		 1111  1111   1111  1111 
 		|		   | |			|
		------------ ------------
		   8 - 15    	0 - 7
		   
		For that we must shift the value 8 bits to the right if sensorBit > 7. 
		For this we use this thing of a math expression: FLOOR(sensorBit / 8) * 8
		
		To ajust the offset for the function we use this math expression: sensorBit - FLOOR(sensorBit / 8) * 8 
		The rest is convertion of data types.
		
 		*)
		extractSensorBit := convertByteBit(	byteVal := TO_BYTE(SHR(_IOExpantionInBytes[sensorByte]^, TO_UINT(FLOOR(sensorBit / 8) * 8))), 
											offset := TO_UINT(sensorBit - FLOOR(sensorBit / 8) * 8 ));
		
	IOExpantionLocation_t.EXPANTION:
		IF sensorByte > 1 THEN 
			extractSensorBit := FALSE; {info 'TODO: integrate in error handeling syastem (sevarity: critical error) "invalid accsess of byte (out of range)" '}
			RETURN;
		END_IF
	
		extractSensorBit := convertByteBit(byteVal := _IOExpantionExpantionInBytes[sensorByte]^, offset := sensorBit);
END_CASE

RETURN;]]></ST>
      </Implementation>
    </Method>
    <Method Name="getSensorStatus" Id="{7b443d43-03f0-4b5f-92b8-6e4d10aad58a}" FolderPath="Sensors\">
      <Declaration><![CDATA[METHOD getSensorStatus : BOOL
VAR_INPUT
	sensorID : sensorID_t;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[{info 'TODO: rename all sensors and test if the imput works'}
	
CASE sensorID OF
	sensorID_t.SENSOR_B8_CONVAYORBELT_METTAL_PRESENT:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.EXPANTION, sensorByte := 0, sensorBit := 0); 
	sensorID_t.SENSOR_B5_STORAGE_ENTRANCE:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.EXPANTION, sensorByte := 0, sensorBit := 1); 
		
	sensorID_t.SENSOR_B17_GRIPPER_RIGHT:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.EXPANTION, sensorByte := 0, sensorBit := 2); 
	sensorID_t.SENSOR_B16_GRIPPER_LEFT:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.EXPANTION, sensorByte := 0, sensorBit := 3); 
		
	sensorID_t.SENSOR_B3_Y3_DOWN:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.EXPANTION, sensorByte := 0, sensorBit := 4); 
	sensorID_t.SENSOR_B4_Y3_UP:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.EXPANTION, sensorByte := 0, sensorBit := 5); 
		
	sensorID_t.EXPANTION_SENSOR_Y4_UP:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.EXPANTION, sensorByte := 0, sensorBit := 6); 
	sensorID_t.EXPANTION_SENSOR_B11_Y5_INSIDE:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.EXPANTION, sensorByte := 0, sensorBit := 7); 
		
	sensorID_t.EXPANTION_SENSOR_B7_ENTRANCE_CONVAYORBELT:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.EXPANTION, sensorByte := 1, sensorBit := 0); 
	sensorID_t.EXPANTION_SENSOR_B6_PART_SENSOR_METTAL_PRESENT:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.EXPANTION, sensorByte := 1, sensorBit := 1); 
		
	sensorID_t.EXPANTION_SENSOR_B12_PART_TURNTABLE_PRESENT:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.EXPANTION, sensorByte := 1, sensorBit := 2); 
	sensorID_t.EXPANTION_SENSOR_Y4_DOWN:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.EXPANTION, sensorByte := 1, sensorBit := 3); 
		
	sensorID_t.EXPANTION_SENSOR_B10_Y5_OUT:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.EXPANTION, sensorByte := 1, sensorBit := 4); 
	sensorID_t.EXPANTION_SENSOR_B18_SENSOR_Y4:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.EXPANTION, sensorByte := 1, sensorBit := 5); 	
		
	sensorID_t.EXPANTION_SENSOR_B1_Y2_DOWN:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.EXPANTION, sensorByte := 1, sensorBit := 6); 
	sensorID_t.EXPANTION_SENSOR_B2_Y2_UP:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.EXPANTION, sensorByte := 1, sensorBit := 7); 
		
	sensorID_t.SENSOR_PNEUMATIC_PRESHURE_OK:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.ROOT, sensorByte := 0, sensorBit := 12); 
	sensorID_t.SENSOR_B13_TURNTABLE_POS_REACHED:
		getSensorStatus := extractSensorBit(sensorLocation := IOExpantionLocation_t.ROOT, sensorByte := 0, sensorBit := 13); 
END_CASE

RETURN;]]></ST>
      </Implementation>
    </Method>
    <Method Name="setActor" Id="{ee0a521a-6c67-4dc3-88dd-d9da5401c02a}" FolderPath="Actors\">
      <Declaration><![CDATA[METHOD setActor : BOOL
VAR_INPUT
	actorID : actorID_t;
	value : BOOL;

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE actorID OF
	actorID_t.ACTOR_0:
		setActorBit(_FestoPneumaticOutBytes[0], 0, value);
		
	actorID_t.ACTOR_1:
		setActorBit(_FestoPneumaticOutBytes[0], 2, value);
		
	actorID_t.ACTOR_2:
		setActorBit(_FestoPneumaticOutBytes[0], 4, value);
		
	actorID_t.ACTOR_3:
		setActorBit(_FestoPneumaticOutBytes[0], 6, value);
		
	actorID_t.ACTOR_4:
		setActorBit(_FestoPneumaticOutBytes[1], 0, value);	
		
	actorID_t.ACTOR_5:
		setActorBit(_FestoPneumaticOutBytes[1], 2, value);
		
	actorID_t.ACTOR_6:
		setActorBit(_FestoPneumaticOutBytes[1], 4, value);
		
	actorID_t.ACTOR_7:
		setActorBit(_FestoPneumaticOutBytes[1], 6, value);
		
	actorID_t.ACTOR_8:
		setActorBit(_FestoPneumaticOutBytes[2], 0, value);
		
	actorID_t.ACTOR_9:
		setActorBit(_FestoPneumaticOutBytes[2], 2, value);
	
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="setActorBit" Id="{d49d41fc-d7bc-481a-89da-655d607b50bb}" FolderPath="Actors\">
      <Declaration><![CDATA[METHOD PRIVATE setActorBit : BOOL
VAR_INPUT
	byteVal : POINTER TO BYTE;
	offset : UINT;
	value : BOOL;
END_VAR
VAR
	tmpByte : BYTE; 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF offset > 7 THEN 
	setActorBit := FALSE; {info 'TODO: integrate in error handeling syastem (sevarity: critical error) "invalid accsess of bit in byte (out of range)" '}
	RETURN;
END_IF

tmpByte := (NOT SHL(1, offset)) AND byteVal^;

byteVal^ := TO_BYTE(SHL(TO_INT(value), offset)) OR tmpByte;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>