<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="ActorStartMovingTimeoutManager_t" Id="{8fe3e1f8-f036-4bef-9a76-45416c29d8d2}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK ActorStartMovingTimeoutManager_t
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	_actorStartMovingTimeoutArray : ARRAY [0..99] OF  ActorStartMovingtimeoutEx_t;
	_maxActorStartMovingTimeoutIndex : UINT := 99;
	_currentActorStartMovingTimeoutIndex : UINT := 0;
	_ErrorMessage : FB_TcMessage;
	_IOExpantionHandler : POINTER TO IOExpantionHandler_t := NULL;
	
	_IOExpantionHandlerNotValidErrorSent : BOOL := FALSE;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[{warning 'TODO: test ActorStartMovingTimeoutManager'}]]></ST>
    </Implementation>
    <Method Name="clear" Id="{402c3bc5-a43e-4113-a20c-ca80f35c210b}">
      <Declaration><![CDATA[// clears and destroyes all AcrtorStartMovingTimeouts
METHOD clear : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_currentActorStartMovingTimeoutIndex := 0;

clear := TRUE;
RETURN;]]></ST>
      </Implementation>
    </Method>
    <Method Name="confirmAll" Id="{7c42a400-27d6-42a7-a724-3a7656f1dac7}">
      <Declaration><![CDATA[// confirm all ActorStartMovingTimeouts
METHOD confirmAll : BOOL
VAR_INPUT
END_VAR

VAR
	i : UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// confirm all alarms
FOR i := 0 TO _currentActorStartMovingTimeoutIndex DO
	_actorStartMovingTimeoutArray[i].ActorStartMovingTimeout.confirm();
END_FOR

confirmAll := TRUE;
RETURN]]></ST>
      </Implementation>
    </Method>
    <Method Name="register" Id="{ea0256d7-1d28-4598-9ee3-42cf846101e0}">
      <Declaration><![CDATA[METHOD register : BOOL
VAR_INPUT
	stEventEntity : TcEventEntry;
	timerTime : TIME; // sets the timer for the timeout
	conformation : BOOL := TRUE; 
	expectedActorValue : BOOL; // actor value when sensor is true
	sensorPtr : POINTER TO BOOL := NULL; 
	actorPtr : POINTER TO BOOL := NULL;
	sensorID : sensorID_t := sensorID_t.SENSOR_NO_SENSOR;
	actorID : actorID_t := actorID_t.ACTOR_NO_ACTOR;
END_VAR

VAR
	_tmpStr: STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _currentActorStartMovingTimeoutIndex + 1 > _currentActorStartMovingTimeoutIndex THEN
	_ErrorMessage.CreateEx(TC_EVENTS.ProgrammingErrors.ExceedingAllowedAmountOfActorMovingTimeoutTimeouts, 0 );
	_ErrorMessage.ipArguments.AddString(__POUNAME());
	_tmpStr := formatPosition(__POSITION());
	_ErrorMessage.ipArguments.AddString(_tmpStr);
	_ErrorMessage.ipArguments.AddUInt(_maxActorStartMovingTimeoutIndex);
	_ErrorMessage.Send(0);
	
	register := FALSE;
	RETURN;
END_IF

IF (NOT (sensorPtr = NULL XOR sensorID = sensorID_t.SENSOR_NO_SENSOR)) OR ( NOT (actorPtr = NULL XOR actorID = actorID_t.ACTOR_NO_ACTOR)) THEN
	_ErrorMessage.CreateEx(TC_EVENTS.ProgrammingErrors.ActorMovingTimeoutNoValidSensorGiven, 0 );
	_ErrorMessage.ipArguments.AddString(__POUNAME());
	_tmpStr := formatPosition(__POSITION());
	_ErrorMessage.ipArguments.AddString(_tmpStr);
	_ErrorMessage.Send(0);
	
	register := FALSE;
	RETURN;
END_IF

_currentActorStartMovingTimeoutIndex := _currentActorStartMovingTimeoutIndex + 1; // increase it by one

_actorStartMovingTimeoutArray[_currentActorStartMovingTimeoutIndex].ActorStartMovingTimeout.register(stEventEntity, timerTime, conformation);
_actorStartMovingTimeoutArray[_currentActorStartMovingTimeoutIndex].actorID := actorID;
_actorStartMovingTimeoutArray[_currentActorStartMovingTimeoutIndex].actorPtr := actorPtr;
_actorStartMovingTimeoutArray[_currentActorStartMovingTimeoutIndex].expectedActorValue := expectedActorValue;
_actorStartMovingTimeoutArray[_currentActorStartMovingTimeoutIndex].sensorID := sensorID;
_actorStartMovingTimeoutArray[_currentActorStartMovingTimeoutIndex].sensorPtr := sensorPtr;

register := TRUE;
RETURN;]]></ST>
      </Implementation>
    </Method>
    <Method Name="resetAll" Id="{36722457-44f8-4006-8a38-9a49a2877102}">
      <Declaration><![CDATA[// resets all ActorStartMovingTimeouts
METHOD resetAll : BOOL
VAR_INPUT
END_VAR

VAR
	i : UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// confirm all alarms
FOR i := 0 TO _currentActorStartMovingTimeoutIndex DO
	_actorStartMovingTimeoutArray[i].ActorStartMovingTimeout.reset();
END_FOR

resetAll := TRUE;
RETURN]]></ST>
      </Implementation>
    </Method>
    <Method Name="resolveWatchdogInput" Id="{366350e9-f7d3-40bb-9a40-264e10d64164}">
      <Declaration><![CDATA[METHOD PRIVATE resolveWatchdogInput : BOOL
VAR_INPUT
	ActorStartMovingTimeoutEx : ActorStartMovingtimeoutEx_t;
END_VAR

VAR
	_tmpStr : STRING;
	
	_sensorVal : BOOL := FALSE; 
	_actorVal : BOOL := FALSE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _IOExpantionHandler = NULL AND _IOExpantionHandlerNotValidErrorSent = FALSE THEN
	_IOExpantionHandlerNotValidErrorSent := TRUE;
	_ErrorMessage.CreateEx(TC_EVENTS.ProgrammingErrors.NoValidPointerToIOExpantionHandler, 0 );
	_ErrorMessage.ipArguments.AddString(__POUNAME());
	_tmpStr := formatPosition(__POSITION());
	_ErrorMessage.ipArguments.AddString(_tmpStr);
	_ErrorMessage.Send(0);
	resolveWatchdogInput := FALSE;
	RETURN;
END_IF

// reslove sensor value
IF ActorStartMovingTimeoutEx.sensorPtr <> NULL THEN
	_sensorVal := ActorStartMovingTimeoutEx.sensorPtr^;
ELSIF ActorStartMovingTimeoutEx.sensorID <> sensorID_t.SENSOR_NO_SENSOR THEN
	_sensorVal := _IOExpantionHandler^.getSensorStatus(ActorStartMovingTimeoutEx.sensorID);
END_IF

// reslove actor value
IF ActorStartMovingTimeoutEx.actorPtr <> NULL THEN
	_actorVal := ActorStartMovingTimeoutEx.actorPtr^;
ELSIF ActorStartMovingTimeoutEx.actorID <> actorID_t.ACTOR_NO_ACTOR THEN
	_actorVal := _IOExpantionHandler^.getActor(ActorStartMovingTimeoutEx.actorID);
END_IF

IF _sensorVal = FALSE THEN // ignore cases when sensor isn't active
	resolveWatchdogInput := TRUE; 
	RETURN; 
END_IF

IF ActorStartMovingTimeoutEx.expectedActorValue <> _actorVal THEN
	resolveWatchdogInput := FALSE; // value missmatch, start timeout
	RETURN;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="setIOExpantionHandler" Id="{4b80066e-5425-44b8-8adc-e37731639c77}">
      <Declaration><![CDATA[// sets the IOExpantionHandler refferance
METHOD setIOExpantionHandler : BOOL
VAR_INPUT
	IOExpantionHandlerPtr: POINTER TO IOExpantionHandler_t;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_IOExpantionHandler := IOExpantionHandlerPtr;
setIOExpantionHandler := TRUE;
RETURN;]]></ST>
      </Implementation>
    </Method>
    <Method Name="update" Id="{d67d7a6b-0013-4f32-a026-df7bd2d4debf}">
      <Declaration><![CDATA[METHOD update : BOOL
VAR_INPUT
END_VAR

VAR
	i : UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO _currentActorStartMovingTimeoutIndex DO
	_actorStartMovingTimeoutArray[i].ActorStartMovingTimeout.update(resolveWatchdogInput(_actorStartMovingTimeoutArray[i]));
END_FOR

update := TRUE;
RETURN;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>