<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="ErrorManager_t" Id="{842a81e2-e336-475a-838f-6e9c58939475}" SpecialFunc="None">
    <Declaration><![CDATA[// This class is for managing all error detecting systems and is regestring errors in diffrent error classes
FUNCTION_BLOCK ErrorManager_t
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	_actorMovingTimeoutManager : ActorMovingTimeoutManager_t;
	_actorStartMovingTimeoutManager : ActorStartMovingTimeoutManager_t;
	_primitiveWatchdogManager : PrimitiveWatchdogManager_t;
	_IOExpantionMessageErrorHandler : IOExpantionMessageErrorHandler_t;
	_IOExpantionHandler : POINTER TO IOExpantionHandler_t;
	
	_trowErrors : BOOL := FALSE; // if true, errors are checked
	_hasError : BOOL := FALSE; // if true, a error has been reported
	_errorsInitialised : BOOL := FALSE; // if true, errors have been initialised
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="confirmAll" Id="{f623fcff-50c3-4dcb-9daa-c54c6e16f627}">
      <Declaration><![CDATA[METHOD confirmAll : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_actorMovingTimeoutManager.confirmAll();
_actorStartMovingTimeoutManager.confirmAll();
_primitiveWatchdogManager.confirmAll();
_IOExpantionMessageErrorHandler.confirmAll();

confirmAll := TRUE;
return;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_Init" Id="{46c4b88e-ccab-4868-89c7-a634247b2345}">
      <Declaration><![CDATA[//FB_Init ist immer implizit verfügbar und wird primär für die Initialisierung verwendet.
//Der Rückgabewert wird nicht ausgewertet. Für gezielte Einflussnahme können Sie
//die Methoden explizit deklarieren und darin mit dem Standard-Initialisierungscode 
//zusätzlichen Code bereitstellen. Sie können den Rückgabewert auswerten.
METHOD FB_Init: BOOL
VAR_INPUT    
bInitRetains: BOOL; // TRUE: Die Retain-Variablen werden initialisiert (Reset warm / Reset kalt)    
bInCopyCode: BOOL;  // TRUE: Die Instanz wird danach in den Kopiercode kopiert (Online-Change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ]]></ST>
      </Implementation>
    </Method>
    <Method Name="hasError" Id="{0f79f821-abb9-4a21-baa9-ae93f287de20}">
      <Declaration><![CDATA[// if the function returns true, an error has been reported
METHOD hasError : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[hasError := hasError OR THIS^._actorMovingTimeoutManager.hasError();
hasError := hasError OR THIS^._actorStartMovingTimeoutManager.hasError();
hasError := hasError OR THIS^._primitiveWatchdogManager.hasError();
hasError := hasError OR THIS^._actorMovingTimeoutManager.hasError();

_hasError := hasError;
return;]]></ST>
      </Implementation>
    </Method>
    <Method Name="initErrors" Id="{47c43490-683d-4666-936e-97faef23b8b8}">
      <Declaration><![CDATA[METHOD PRIVATE initErrors : BOOL
VAR_INPUT
END_VAR
VAR CONSTANT
 	diagCodeErrorTestMessage : ARRAY[0..3] OF BYTE := [16#03, 16#E0, 16#08, 16#00];
	textIDErrorTestMessage : ARRAY[0..1] OF BYTE := [16#38, 16#00];
	diagCodeClearTestMessage : ARRAY[0..3] OF BYTE := [16#03, 16#E0, 16#08, 16#00];
	textIDClearTestMessage : ARRAY[0..1] OF BYTE := [16#38, 16#10];
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// register all errors
_actorMovingTimeoutManager.register(stEventEntity := TC_EVENTS.OperationalErrors2.LinearDriveMoveTimedout, timerTime := T#10S, conformation := TRUE, sensorID1 := sensorID_t.SENSOR_B17_GRIPPER_RIGHT, sensorID2 := sensorID_t.SENSOR_B16_GRIPPER_LEFT, waitHWConformation := FALSE);
_actorMovingTimeoutManager.register(stEventEntity := TC_EVENTS.OperationalErrors2.RotaryTableMoveTimeout, timerTime := T#5S, conformation := TRUE, sensorID1 := sensorID_t.SENSOR_B13_TURNTABLE_POS_REACHED, waitHWConformation := FALSE);
_actorMovingTimeoutManager.register(stEventEntity := TC_EVENTS.OperationalErrors2.Y2moveTimeout, timerTime := T#2S, conformation := TRUE, sensorID1 := sensorID_t.EXPANTION_SENSOR_B1_Y2_DOWN, sensorID2 := sensorID_t.EXPANTION_SENSOR_B2_Y2_UP, waitHWConformation := FALSE);
_actorMovingTimeoutManager.register(stEventEntity := TC_EVENTS.OperationalErrors2.Y3moveTimeout, timerTime := T#2S, conformation := TRUE, sensorID1 := sensorID_t.SENSOR_B3_Y3_DOWN, sensorID2 := sensorID_t.SENSOR_B4_Y3_UP, waitHWConformation := FALSE);


_actorStartMovingTimeoutManager.register(stEventEntity := TC_EVENTS.OperationalErrors2.LinearDriveStartMoveLeftTimeout, timerTime := T#5S, conformation := TRUE, sensorID := sensorID_t.SENSOR_B16_GRIPPER_LEFT, actorID := actorID_t.ACTOR_GRIPPER_RIGHT_LEFT, expectedActorValue := TRUE, waitHWConformation := FALSE);
_actorStartMovingTimeoutManager.register(stEventEntity := TC_EVENTS.OperationalErrors2.LinearDriveStartMoveRightTimeout, timerTime := T#5S, conformation := TRUE, sensorID := sensorID_t.SENSOR_B17_GRIPPER_RIGHT, actorID := actorID_t.ACTOR_GRIPPER_RIGHT_LEFT, expectedActorValue := FALSE, waitHWConformation := FALSE);
_actorStartMovingTimeoutManager.register(stEventEntity := TC_EVENTS.OperationalErrors2.Y2StartMoveDownTimeout, timerTime := T#1S, conformation := TRUE, sensorID := sensorID_t.EXPANTION_SENSOR_B1_Y2_DOWN, actorID := actorID_t.ACTOR_Y2_OUT, expectedActorValue := FALSE, waitHWConformation := FALSE);
_actorStartMovingTimeoutManager.register(stEventEntity := TC_EVENTS.OperationalErrors2.Y2StartMoveUpTimeout, timerTime := T#1S, conformation := TRUE, sensorID := sensorID_t.EXPANTION_SENSOR_B2_Y2_UP, actorID := actorID_t.ACTOR_Y2_OUT, expectedActorValue := TRUE, waitHWConformation := FALSE);
_actorStartMovingTimeoutManager.register(stEventEntity := TC_EVENTS.OperationalErrors2.Y3StartMoveDownTimeout, timerTime := T#1S, conformation := TRUE, sensorID := sensorID_t.SENSOR_B3_Y3_DOWN, actorID := actorID_t.ACTOR_Y3_OUT, expectedActorValue := FALSE, waitHWConformation := FALSE);
_actorStartMovingTimeoutManager.register(stEventEntity := TC_EVENTS.OperationalErrors2.Y3StartMoveUpTimeout, timerTime := T#1S, conformation := TRUE, sensorID := sensorID_t.SENSOR_B4_Y3_UP, actorID := actorID_t.ACTOR_Y3_OUT, expectedActorValue := TRUE, waitHWConformation := FALSE);

_primitiveWatchdogManager.register(stEventEntity := TC_EVENTS.OperationalErrors2.LowPneumaticPressure, timerTime := T#10S, conformation := TRUE, sensorID := sensorID_t.SENSOR_PNEUMATIC_PRESHURE_OK, waitHWConformation := FALSE);
_primitiveWatchdogManager.register(stEventEntity := TC_EVENTS.OperationalErrors.EmStopPressed, timerTime := T#100MS, conformation := TRUE, sensorPtr := ADR(InputOutput.EmStop), waitHWConformation := FALSE);

_IOExpantionMessageErrorHandler.register(stEventEntity := TC_EVENTS.ProgrammingErrors.testError, timerTime := T#10MS, conformation := TRUE, diagCodeErrorMessage := diagCodeErrorTestMessage, textIDErrorMessage := textIDErrorTestMessage, diagCodeClearMessage := diagCodeClearTestMessage, textIDClearMessage := textIDClearTestMessage);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="reset" Id="{cbb3611f-047d-4b5e-8440-7113467dc56c}">
      <Declaration><![CDATA[// resets all errors 
METHOD reset : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_actorMovingTimeoutManager.resetAll();
_actorStartMovingTimeoutManager.resetAll();
_primitiveWatchdogManager.resetAll();
_IOExpantionMessageErrorHandler.resetAll();]]></ST>
      </Implementation>
    </Method>
    <Method Name="setIOExpantionHandler" Id="{7f37fa64-74a8-4cd9-ab1a-fc95bb889207}">
      <Declaration><![CDATA[METHOD setIOExpantionHandler : BOOL
VAR_INPUT
	IOExpantionHandlerPtr : POINTER TO IOExpantionHandler_t;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_IOExpantionHandler := IOExpantionHandlerPtr;
_actorMovingTimeoutManager.setIOExpantionHandler(_IOExpantionHandler);
_actorStartMovingTimeoutManager.setIOExpantionHandler(_IOExpantionHandler);
_primitiveWatchdogManager.setIOExpantionHandler(_IOExpantionHandler);
_IOExpantionMessageErrorHandler.setIOExpantionHandler(_IOExpantionHandler);

setIOExpantionHandler := TRUE;
return;]]></ST>
      </Implementation>
    </Method>
    <Method Name="startErrors" Id="{0a02a265-77f8-43fe-b8ce-a08e96e2699c}">
      <Declaration><![CDATA[METHOD startErrors : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^._trowErrors := TRUE;

startErrors := TRUE;
RETURN; ]]></ST>
      </Implementation>
    </Method>
    <Method Name="stopErrors" Id="{b250820f-64a4-4552-90cc-078ef65f4dc6}">
      <Declaration><![CDATA[METHOD stopErrors : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^._trowErrors := False;

stopErrors := TRUE;
RETURN; ]]></ST>
      </Implementation>
    </Method>
    <Method Name="update" Id="{c40b9498-33aa-41a4-a1e0-fda8c5913e46}">
      <Declaration><![CDATA[// call this method every sycle
METHOD update : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _IOExpantionHandler = NULL THEN
	update := FALSE;
	RETURN;
END_IF

IF _errorsInitialised = FALSE THEN
	initErrors();
	_errorsInitialised := TRUE;
END_IF

// is not an actor error and can appear outside of opperations.
//_IOExpantionMessageErrorHandler.update(); 
{warning 'disabled IOExpantionMessageErrorHandler'}

IF _trowErrors = FALSE THEN
	update := TRUE;
	RETURN;
END_IF

_actorMovingTimeoutManager.update();
_actorStartMovingTimeoutManager.update();
_primitiveWatchdogManager.update();

update := TRUE;
RETURN;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>