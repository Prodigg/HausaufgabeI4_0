<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="MAIN" Id="{3247d232-9c57-40b4-8ebc-0fdeaa0dda4d}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
signalStatusLamp : SignalStatusLamp_t;

systemStatus : systemStatus_t := systemStatus_t.STOPPED;
ARDevice : ARDeviceAPI_t;

IOExpantionHandler : IOExpantionHandler_t;

mainStateMachine : mainStateMachine_t;

ARUIHandler : ARUIHandler_t;

HMIHandler : HMIHandler_t;

ErrorManager : ErrorManager_t;

_ErrorMessage : FB_TcMessage;
_tmpStr : STRING := '';

//test
firstRun : BOOL := FALSE;
run : bool := false;
callback : BOOL := FALSE;

diagCode : ARRAY[0..3] OF BYTE := [16#03, 16#E0, 16#08, 16#00];
textID : ARRAY[0..1] OF BYTE := [16#00, 16#38];

//murr test
	ReadDiag: FB_EcCoESdoRead;
	
BuffDiagMess :Array[0..236] of byte;
	xStart: BOOL;
	ReadLength: UDINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// always update mainStateMachine IOExpantionahndler refferance
mainStateMachine.IOExpantionHandler := ADR(IOExpantionHandler);

ARUIHandler.ARDevice := ADR(ARDevice);
ARUIHandler.systemStatus := ADR(systemStatus);


HMIHandler.systemStatus := ADR(systemStatus);


IF (InputOutput.StartButton OR HMIInterface.HMIStartMachine) AND NOT (systemStatus = systemStatus_t.ERROR) THEN 
	systemStatus := systemStatus_t.RUNNING; // TODO: Starting isn't implemented jet and also isn't really needed at the moment
	//ARCommunication.sendNewMessage(ADR(testStr)); // test for websocet connection
	mainStateMachine.startStateMachine(); // start state machine
	ErrorManager.startErrors();
END_IF
	
IF (NOT InputOutput.StopButton OR HMIInterface.HMIStopMachine) THEN
	mainStateMachine.stopStateMachine(); 
	systemStatus := systemStatus_t.STOPPING; 
	ErrorManager.stopErrors();
END_IF

IF systemStatus = systemStatus_t.STOPPING AND mainStateMachine.getIsStateMachineON() = FALSE THEN
	systemStatus := systemStatus_t.STOPPED; 
END_IF

// push error test
IF (NOT InputOutput.EmStop) AND systemStatus <> systemStatus_t.ERROR AND FALSE THEN 
 			_ErrorMessage.CreateEx(TC_EVENTS.OperationalErrors.EmStopPressed, 0 ); {info 'TODO: make this a alarm and not a message'}
			_ErrorMessage.ipArguments.AddString(__POUNAME());
			_tmpStr := formatPosition(__POSITION());
			_ErrorMessage.ipArguments.AddString(_tmpStr);
			_ErrorMessage.Send(0);
END_IF


IF ErrorManager.hasError() THEN
	// overwrite systemstatus to force to error state
	systemStatus := systemStatus_t.ERROR; 
	mainStateMachine.reset(); // reset StateMachine
	ErrorManager.stopErrors();
END_IF

// reset errors 
IF InputOutput.ResetButton AND systemStatus = systemStatus_t.ERROR THEN
	systemStatus := systemStatus_t.STOPPED;
	ErrorManager.confirmAll();
	InputOutput.QuittierenLamp := FALSE;
END_IF

// set lamp of quittierung
IF ErrorManager.hasError() AND systemStatus = systemStatus_t.ERROR THEN 
	InputOutput.QuittierenLamp := TRUE;
END_IF

// set maschine running lamp 
InputOutput.OnOffStatusLamp := (systemStatus = systemStatus_t.RUNNING);

CASE systemStatus OF
	systemStatus_t.STOPPED:
		signalStatusLamp.setStatus(status:=SignalStatusLampStatus_t.NONE);
		
	systemStatus_t.STARTING:
		signalStatusLamp.setStatus(status := SignalStatusLampStatus_t.STARTING);
		
	systemStatus_t.RUNNING:
		signalStatusLamp.setStatus(status:=SignalStatusLampStatus_t.OPERATIONAL);
		
	systemStatus_t.ERROR:
		signalStatusLamp.setStatus(status:=SignalStatusLampStatus_t.ERROR);
	
	systemStatus_t.STOPPING:
		signalStatusLamp.setStatus(status:=SignalStatusLampStatus_t.STOPPING);
	
END_CASE

signalStatusLamp.update();

ARDevice.update();
ARUIHandler.update();

mainStateMachine.update();

HMIHandler.update();

ErrorManager.setIOExpantionHandler(ADR(IOExpantionHandler));
ErrorManager.update();

// test
{warning 'remove test'}


IF firstRun = FALSE AND run THEN
	firstRun := TRUE;
	IOExpantionHandler.subscribe(callbackVariable := ADR(callback), diagCode := diagCode, textID := textID);
END_IF

IF run THEN
	IOExpantionHandler.comUpdate();
END_IF

// murr test
(*ReadDiag(
	sNetId:= '5.85.199.196.4.1', 
	nSlaveAddr:=1001 , 
	nSubIndex:= 9, 
	nIndex:= 16#10F3, 
	pDstBuf:= ADR(BuffDiagMess), 
	cbBufLen:= 237, 
	bExecute:=xStart , 
	tTimeout:= T#5S, 
	bBusy=> , 
	bError=> , 
	nErrId=> , 
	cbRead=>ReadLength);
*)]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>